{"name":"Class","tagline":"Lite-weight and optimized class definition made simple in Javascript. Supports namespacing, classes, inheritance and module mixins in just 5kb","body":"# Javascript Classes\r\nClass.js is lite-weight and optimized library used for defining namespaces, classes \r\nand inheritance in Javascript using a terse and supple syntax.\r\n\r\n**Define a Namespace**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\");\r\n  \tui.controls.Box = function(){}\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Define an empty Class in a Namespace**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n  \t    //class body here\r\n  \t})\r\n  </code>\r\n  \r\n  ==USAGE==\r\n  var box = new ui.controls.Box;\r\n</pre>\r\n\r\n\r\n**Define a Class constructor**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n    \t  initialize : function(){\r\n    \t      alert(\"I am a box\")\r\n    \t  }\r\n  \t})\r\n  </code>\r\n  \r\n  ==USAGE==\r\n  var box = new ui.controls.Box; //invokes the constructor automatically\r\n</pre>\r\n\r\n\r\n**Define a Class constructor with arguments**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n    \t  initialize : function(width, heigt){\r\n    \t      this.width  = width;\r\n    \t      this.height = height;\r\n    \t  }\r\n  \t})\r\n  </code>\r\n  \r\n  ==USAGE==\r\n  var box = new ui.controls.Box(300, 200);\r\n</pre>\r\n\r\n\r\n**Define other instance methods**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n    \t  initialize : function(){\r\n    \t      alert(\"I am a box\")\r\n    \t  },\r\n    \t  \r\n    \t  isBox : function(){\r\n    \t      return this instanceof ui.controls.Box\r\n    \t  }\r\n  \t})\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Define inheritance**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Panel\", {\r\n  \t    '@inherits': ui.controls.Box\r\n  \t})\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Call baseclass methods**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Panel\", {\r\n  \t    '@inherits': ui.controls.Box,\r\n  \t    \r\n  \t    isBox : function(){\r\n  \t        this.parent();\r\n  \t        alert(\"delegating to isBox() on baseclass Box\");\r\n  \t    }\r\n  \t})\r\n  </code>\r\n</pre>\r\n\r\n\r\n# Code Sharing > Modules Mixins\r\nIn object-oriented programming, to reuse code (a module or api) across multiple classes\r\nwhen inheritance does not make sense is to use either:\r\n   - delegation (every language)\r\n   - multiple inheritance (C++, Lisp, Perl, Python)\r\n   - mixins (Ruby - http://www.tutorialspoint.com/ruby/ruby_modules.htm)\r\n   - traits (SELF, PHP - http://en.wikipedia.org/wiki/Traits_class#PHP)\r\n\r\nFor our Javascript classes, we'll use the concept of traits which work like php's traits \r\nand Ruby's simpler module mixins. We'll look at both here.\r\n\r\n**Define a module to mixin**\r\n<pre>\r\n  <code>\r\n  \tvar Logger = {\r\n  \t    log : function(str){\r\n  \t        console.log(str) //delegates to firebug\r\n  \t    },\r\n  \t    warn : function(str){\r\n  \t        console.warn(str)\r\n  \t    }\r\n  \t}\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Apply the module as a mixin**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n  \t    '@traits' : [Logger],\r\n  \t    \r\n    \t  initialize : function(){\r\n    \t      alert(\"I am a box\")\r\n    \t  }\r\n  \t})\r\n  </code>\r\n</pre>\r\n\r\n\r\n# Code Sharing > Traits\r\nTraits are similar to module mixins, but does not actually mix itself into the prototype chain of\r\nthe class. Instead, a trait is self-contained function with seperate scope, runs isolated and able to decorate\r\nthe host class with new behavior and properties. A mixin otherwise mixes itself and all it's state into\r\nthe prototype of the class. Both ways have pros and cons.\r\n\r\n**Define a function as a trait**\r\n<pre>\r\n  <code>\r\n  \tvar Logger = function(hostClass){\r\n  \t        this.host = hostClass;\r\n  \t        this.host.logapi = this;\r\n  \t    };\r\n  \t    \r\n  \t    Logger.prototype = {\r\n      \t    log : function(str){\r\n      \t        console.log(this.host.namespace + \" logged -> \" + str);\r\n      \t    }\r\n  \t    }\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Apply the function as a trait**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n  \t    '@traits' : [Logger],\r\n  \t    \r\n    \t  initialize : function(){\r\n    \t      console.log(this.logapi) //reference to Logger instance\r\n    \t  },\r\n    \t  \r\n    \t  log : function(str){\r\n    \t      this.logapi.log(str)\r\n    \t  }\r\n  \t})\r\n  </code>\r\n</pre>\r\n\r\n\r\n# Code Sharing > Multiple Traits\r\nYour class might make use of a single trait or multiple traits, -- works like multiple inheritance \r\nwhich could lead to ambigous method calls, but increases the leverage to share code across classes:\r\n\r\n**Define multiple kinds of traits (as functions or modules)**\r\n<pre>\r\n  <code>\r\n    var Draggable = {\r\n        initialize : function(){},\r\n        setDraggable : function(){...}\r\n    };\r\n    \r\n    var Resizable = {...}\r\n    \r\n  \tvar Logger = function(hostClass){\r\n  \t        this.host = hostClass;\r\n  \t        this.host.logapi = this;\r\n  \t    };\r\n  \t    \r\n  \t    Logger.prototype = {\r\n      \t    log : function(str){\r\n      \t        console.log(this.host.namespace + \" logged -> \" + str);\r\n      \t    }\r\n  \t    }\r\n  </code>\r\n</pre>\r\n\r\n\r\n**Implement multiple traits**\r\n<pre>\r\n  <code>\r\n  \tnamespace(\"ui.controls.Box\", {\r\n  \t    '@traits' : [Logger, Draggable, Resizable],\r\n  \t    \r\n    \t  initialize : function(){\r\n    \t      console.log(\"I can now log, drag and resize myself :\");\r\n    \t  }\r\n  \t})\r\n  </code>\r\n</pre>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}